prim__add_Integer = [{arg:0}, {arg:1}]: (+Integer [!{arg:0}, !{arg:1}])
prim__sub_Integer = [{arg:0}, {arg:1}]: (-Integer [!{arg:0}, !{arg:1}])
prim__mul_Integer = [{arg:0}, {arg:1}]: (*Integer [!{arg:0}, !{arg:1}])
Main.main = []: (%let uno (Main.depends [1]) (Prelude.IO.putStrLn [(%con [cons] Prelude.IO.MkHasIO Just 0 [(%con [record] Prelude.Interfaces.MkMonad Just 0 [(%con [record] Prelude.Interfaces.MkApplicative Just 0 [(%lam b (%lam a (%lam func (%lam {arg:8737} (Prelude.IO.map [!func, !{arg:8737}]))))), (%lam a (%lam {arg:9440} (%lam {eta:0} !{arg:9440}))), (%lam b (%lam a (%lam {arg:9446} (%lam {arg:9453} (PrimIO.io_bind [!{arg:9446}, (%lam f' (PrimIO.io_bind [!{arg:9453}, (%lam a' (%lam {eta:0} (!f' [!a'])))]))])))))]), (%lam b (%lam a (%lam {arg:9920} (%lam {arg:9923} (PrimIO.io_bind [!{arg:9920}, !{arg:9923}]))))), (%lam a (%lam {arg:9934} (PrimIO.io_bind [!{arg:9934}, (%lam {eta:0} !{eta:0})])))]), (%lam a (%lam {arg:11999} !{arg:11999}))]), (%case !uno [(%concase [cons] Main.MkUser Just 0 [{e:0}, {e:1}] !{e:0})] Nothing)]))
Main.depends = [{arg:0}]: (%case !{arg:0} [(%constcase 1 (%con [cons] Main.MkUser Just 0 ["haha", 2])), (%constcase 0 (%con [record] Main.MkUser2 Just 0 ["compilacion", 4, 5]))] Nothing)
Main.MkUser2 = Constructor tag Just 0 arity 3
Main.MkUser = Constructor tag Just 0 arity 2
Builtin.believe_me = [{arg:2}]: (believe_me [___, ___, !{arg:2}])
Prelude.Types.prim__integerToNat = [{arg:0}]: (%case (%case (<=Integer [0, !{arg:0}]) [(%constcase 0 0)] Just 1) [(%constcase 1 (Builtin.believe_me [!{arg:0}])), (%constcase 0 0)] Nothing)
Prelude.Interfaces.MkMonad = Constructor tag Just 0 arity 3
Prelude.Interfaces.MkApplicative = Constructor tag Just 0 arity 3
Prelude.IO.map = [{arg:2}, {arg:3}]: (PrimIO.io_bind [!{arg:3}, (%lam {eta:0} (%lam {eta:1} (!{arg:2} [!{eta:0}])))])
Prelude.IO.putStrLn = [{arg:1}, {arg:2}]: (Prelude.IO.putStr [!{arg:1}, (++ [!{arg:2}, "\n"])])
Prelude.IO.putStr = [{arg:1}, {arg:2}]: (%case !{arg:1} [(%concase [cons] Prelude.IO.MkHasIO Just 0 [{e:1}, {e:2}] ((!{e:2} [___]) [(%lam {eta:0} (Prelude.IO.prim__putStr [!{arg:2}, !{eta:0}]))]))] Nothing)
Prelude.IO.prim__putStr = Foreign call ["C:idris2_putStr, libidris2_support, idris_support.h", "node:lambda:x=>process.stdout.write(x)", "browser:lambda:x=>console.log(x)"] [String, %World] -> IORes Unit
Prelude.IO.MkHasIO = Constructor tag Just 0 arity 2
PrimIO.case block in io_bind = [{arg:3}, {arg:5}]: (%let {eff:0} !{arg:5} (%let {eff:1} (!{arg:3} [!{eff:0}]) (!{eff:1} [___])))
PrimIO.unsafePerformIO = [{arg:1}]: (%let {eff:0} !{arg:1} (PrimIO.unsafeCreateWorld [(%lam w (%let {eff:1} (!{eff:0} [!w]) !{eff:1}))]))
PrimIO.unsafeCreateWorld = [{arg:1}]: (!{arg:1} [%MkWorld])
PrimIO.io_bind = [{arg:2}, {arg:3}]: (%let {eff:0} !{arg:2} (%lam w (PrimIO.case block in io_bind [!{arg:3}, (!{eff:0} [!w])])))
